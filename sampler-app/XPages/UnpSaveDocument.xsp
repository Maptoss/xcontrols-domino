<?xml version="1.0" encoding="UTF-8"?>
	<!--
		Copyright 2013 Teamstudio Inc Licensed under the Apache License,
		Version 2.0 (the "License"); you may not use this file except in
		compliance with the License. You may obtain a copy of the License at
		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License
	-->

<xp:view xmlns:xp="http://www.ibm.com/xsp/core" rendered="false">

	<xp:this.afterRenderResponse><![CDATA[#{javascript:var exCon = facesContext.getExternalContext(); 
var writer = facesContext.getResponseWriter();
var response = exCon.getResponse();
response.setContentType("text/plain; charset=\"utf-8\"");
var resp;
var unid = "testing";
try{
	resp = "Started\n";
	//print(resp);
	var doc = null;
	resp += "Getting doc\n";
	//print(resp);
	var dbname = context.getUrlParameter("dbname");
	if (dbname != "" && dbname != "null" && dbname != null){
		resp += "Working with different db: " + dbname + "\n";
		//print(resp);
		try{
			var dbother:NotesDatabase;
			if (dbname.indexOf("!") > -1){
				dbother = session.getDatabase(@Left(dbname, "!"), @RightBack(dbname, "!"));
			}else{
				if (isUnpluggedServer()){
					dbname = @ReplaceSubstring(dbname, ".nsf", ".unp");
					resp += "We're on Unplugged, so dbname is " + dbname + "\n";
					//print(resp);
					dbother = session.getDatabase("", context.getUrlParameter("dbname"));
				}else{
					dbother = session.getDatabase(database.getServer(), context.getUrlParameter("dbname"));
				}
			}
			doc = dbother.getDocumentByUNID(context.getUrlParameter("unid"));
		}catch(e){
			resp += "Error getting doc from another database on server " + database.getServer() + " " + e + "\n";
			//print(resp);
		}
		if (doc == null){
			resp += "Working with other db: " + dbother.getTitle() + ")\n";
			resp += "Creating doc in other db (" + context.getUrlParameter("dbname") + ")\n";
			//print(resp);
			doc = dbother.createDocument();
			doc.replaceItemValue("Form", context.getUrlParameter("formname"));
		}	
	}else{
		resp += "Working with current DB" + "\n";
		//print(resp);
		try{
			doc = database.getDocumentByUNID(context.getUrlParameter("unid"));
		}catch(e){
			resp += "Error getting doc\n";
			//print(resp);
		}
		if (doc == null){
			resp += "Creating doc\n";
			//print(resp);
			doc = database.createDocument();
			doc.replaceItemValue("Form", context.getUrlParameter("formname"));
		}
	}
	resp += "getting parentunid\n";
	//print(resp);
	if (context.getUrlParameter("parentunid") != null && context.getUrlParameter("parentunid") != "" && context.getUrlParameter("parentunid") != "null"){
		resp += "parentunid = " + context.getUrlParameter("parentunid") + "\n";
		//print(resp);
		var parent:NotesDocument = database.getDocumentByUNID(context.getUrlParameter("parentunid"));
		resp += "creating response to parentunid = " + parent.getUniversalID() + "\n";
		//print(resp);
		doc.makeResponse(parent);
	}
	resp += "setting dateformat\n";
	//print(resp);
	var dateformat = /^(19|20)\d\d[- \/.](0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])$/;
	try{
		resp += "getting keyset\n";
		//print(resp);
		var keys = param.keySet().iterator();
		resp += "starting iterator loop\n";
		//print(resp);
		while(keys.hasNext()){
			var key = keys.next();
			resp += ("Processing " + key + "\n");
			//print(resp);
			var value = "";
			if (param.get(key).indexOf("%") > -1){
				//print("Handling special case for %");
				value = param.get(key);
			}else{
				value = unescape(param.get(key));
			}
			if (dateformat.test(value) && key.indexOf("datetime_") == -1){
				value = value.split("-");
				value = session.createDateTime(@Date(parseInt(value[0], 10), parseInt(value[1], 10), parseInt(value[2], 10)));
			}
			if(key.indexOf("timeonly_") > -1){
                var keyNames = key.split("timeonly_");
                key = keyNames[keyNames.length - 1];
                var todaysDate = new Date();
                var timeval = value.split(":");
                todaysDate.setHours(parseInt(timeval[0]));
                todaysDate.setMinutes(parseInt(timeval[1], 10));
                value = session.createDateTime(todaysDate);                        
            }
			if (@Left(key, 2) == "$$"){
				//Ignore, this is a system field
			}else{
				var fieldnames;
				var fieldname;
				if (key.indexOf(":") > -1){
					fieldnames = key.split(":");
					fieldname = fieldnames[fieldnames.length - 1];
				}else{
					fieldname = key;
				}
				if (fieldname.indexOf("__") > -1){
					//This needs to be a multi value field
					fieldnames = fieldname.split("__");
					resp += "start fieldname = " + fieldname + "\n";
					//print(resp);
					fieldname = fieldnames[fieldnames.length - 1]
					resp += "new fieldname = " + fieldname + "\n";
					resp += "value = " + value + "\n";
					//print(resp);
					value = @Explode(value, ",");
					doc.replaceItemValue(fieldname, value);
					resp += (fieldname + ": " + value + "\n");
					//print(resp);
				}else if(fieldname.indexOf("int_") > -1){
					//This needs to be an integer value field
					fieldnames = fieldname.split("int_");
					resp += "start fieldname = " + fieldname + "\n";
					fieldname = fieldnames[fieldnames.length - 1]
					resp += "new fieldname = " + fieldname + "\n";
					//print(resp);
					resp += "value = " + parseInt(value) + "\n";
					//print(resp);
					value = parseInt(value);
					if (isNaN(value)){
						value = 0;
					}
					doc.replaceItemValue(fieldname, value);
					resp += (fieldname + ": " + value) + "\n";
					//print(resp);
				}else if(fieldname.indexOf("float_") > -1){
					//This needs to be a float value field
					fieldnames = fieldname.split("float_");
					resp += "start fieldname = " + fieldname + "\n";
					//print(resp);
					fieldname = fieldnames[fieldnames.length - 1]
					resp += "new fieldname = " + fieldname + "\n";		
					resp += "value = " + parseFloat(value) + "\n";
					//print(resp);
					value = parseFloat(value);
					if (isNaN(value)){
						value = 0;
					}
					doc.replaceItemValue(fieldname, value);
					resp += (fieldname + ": " + value) + "\n";
					//print(resp);
				}else if(fieldname.indexOf("datetime_") > -1){
					fieldnames = fieldname.split("datetime_");
					fieldname = fieldnames[fieldnames.length - 1]
					var dateval = @Left(value, "T").split("-");
					var timeval = @Right(value, "T").split(":");
					value = session.createDateTime(@Date(parseInt(dateval[0], 10), parseInt(dateval[1], 10), parseInt(dateval[2], 10), parseInt(timeval[0]), parseInt(timeval[1], 10), 0));
					doc.replaceItemValue(fieldname, value);
					resp += (fieldname + ": " + value) + "\n";
					//print(resp);
				}else if (typeof value == "string" && value.indexOf("data:") > -1 && value.indexOf("base64") > -1){
					//NB If you are using this, you MUST add commons-codec-1.10.jar
					//print("Processing base64 string...");
					var imageDataBytes = value.substring(value.indexOf(",")+1);
					//print(imageDataBytes.length);
					var is:java.io.InputStream = new java.io.ByteArrayInputStream(org.apache.commons.codec.binary.Base64.decodeBase64(imageDataBytes.getBytes()));
					var mime:NotesMIMEEntity  = doc.createMIMEEntity(fieldname);
					//print("created mime field " + fieldname);
					var header:NotesMIMEHeader = mime.createHeader("Content-Disposition");
					var fileName = "photo.png";
					header.setHeaderVal("attachment; filename=\"" + fileName + "\"");
					header = mime.createHeader("Content-ID");
					header.setHeaderVal(fileName);
					var stream = session.createStream();
					stream.setContents(is);
					mime.setContentFromBytes(stream, "image/png", NotesMIMEEntity.ENC_IDENTITY_BINARY);
					stream.close();
					//print("Processed image");
					value = "";
				}else{
					doc.replaceItemValue(fieldname, value);
					resp += (fieldname + ": " + value) + "\n";
					//print(resp);
				}
			}
		}

		doc.save();
		unid = doc.getUniversalID();
		resp = "OK";
	}catch(e){
		resp += resp + e + "\n";
		//print(resp);
	}
}catch(mainerror){
	//print(resp);
	_dump(mainerror);
}
if(resp == "OK")
{
	writer.write(unid);
} else {
	writer.write("Error: " + resp);
}
writer.endDocument();
facesContext.responseComplete();}]]></xp:this.afterRenderResponse>
	<xp:this.resources>
		<xp:script src="/unpCommon.jss" clientSide="false"></xp:script>
	</xp:this.resources>
</xp:view>