<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" rendered="false">

	<xp:this.afterRenderResponse><![CDATA[#{javascript:
// The external context gives access to the servlet environment
var exCon = facesContext.getExternalContext(); 

// The writer is the closest you get to a PRINT statement
// If you need to output binary data, use the stream instead
var writer = facesContext.getResponseWriter();

// The servlet's response, check the J2EE documentation what you can do
var response = exCon.getResponse();
response.setHeader("Cache-Control", "no-cache");

try{
var out = [];
var category = param.get("query");
if (category == "null" || category == "" || category == "undefined"){
	return null;
}else{
	//Get the DB the view is in
	var dbname = context.getUrlParameter("dbname");
	var thedb = database;
	if (dbname != "" && dbname != "null" && dbname != null){
		try{
			var dbother:NotesDatabase;
			if (dbname.indexOf("!") > -1){
				dbother = session.getDatabase(@Left(dbname, "!"), @RightBack(dbname, "!"));
			}else{
				if (isUnpluggedServer()){
					dbname = @ReplaceSubstring(dbname, ".nsf", ".unp");
					resp += "We're on Unplugged, so dbname is " + dbname + "\n";
					dbother = session.getDatabase("", context.getUrlParameter("dbname"));
				}else{
					dbother = session.getDatabase(database.getServer(), context.getUrlParameter("dbname"));
				}
			}
			thedb = dbother;
		}catch(e){
			
		}
	}

	var query = param.get("query").toLowerCase();
	var vw:NotesView = thedb.getView(param.get("chosenView"));
	var vec = vw.getAllEntries();
	var start:NotesViewEntry = vw.getEntryByKey(query, false);
	var ve:NotesViewEntry = vec.getFirstEntry();
	if (start != null && !isUnpluggedServer()){
		ve = vec.getEntry(start);
	}
	var starttime = new Date();
	while(ve != null){
		var val = ve.getColumnValues().elementAt(0);
		if (typeof val == "java.util.Vector"){
			for (var i=0; i<val.size(); i++){
				if (val.elementAt(i).indexOf(query) > -1){
					out.push(val.elementAt(i));
				}
			}
		}else if (val.indexOf(query) > -1){
			out.push(val);
		}
		var venext = vec.getNextEntry(ve);
		ve.recycle();
		ve = venext;
		out = @Unique(out);
		if (typeof out == "java.lang.String" || typeof out == "string"){
			//Ah the joys of SSJS doing stupid things!
			out = [out];
		}
		if (out.length > 10){
			//If we've got 10 results then that's enough!
			break;
		}
		var check = new Date();
		if (check.getTime() > (starttime.getTime() + 1000)){
			//We're going to give up, it's taking too long
			break;
		}
	}
	vec.recycle();
	vw.recycle();
	out = out.sort();
	var strout = "[";
	var len = 0;
	for (var i=0; i<out.length; i++){
		if (out[i].indexOf(category.toLowerCase()) > -1){
			if (len > 0){
				strout += ", ";
			}
			strout += "\"" + out[i] + "\"";
			if (len > 10){
				break;
			}
			len++;
		}
	}
	strout += "]";
		
	// In this example we want to deliver xml and make sure it doesn't get cached
	response.setContentType("application/json");
	
	// Here all your output will be written
	writer.write(strout);
	
}
}catch(e){
	// In this example we want to deliver xml and make sure it doesn't get cached
	response.setContentType("text/plain");
	
	// Here all your output will be written
	writer.write("Error: " + e.message);
}
// We tell the writer we are through
writer.endDocument();
facesContext.responseComplete();
}]]></xp:this.afterRenderResponse>
	<xp:this.resources>
		<xp:script src="/unpCommon.jss" clientSide="false"></xp:script>
	</xp:this.resources>
</xp:view>
